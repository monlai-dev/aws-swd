name: Deploy to EC2 with Dynamic .env

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t monlaine123/monlai:latest .

      - name: Push to Docker Hub
        run: docker push monlaine123/monlai:latest

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy and Configure on EC2
        shell: bash
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} << 'EOF'
          set -e

          echo "==> Ensuring project directory exists"
          mkdir -p ${{ secrets.EC2_PROJECT_DIR }}
          cd ${{ secrets.EC2_PROJECT_DIR }}

          echo "==> Starting Docker"
          sudo systemctl start docker || echo "Docker might already be running"
          sudo systemctl enable docker

          echo "==> Adding ec2-user to docker group"
          sudo usermod -aG docker ec2-user || echo "Already in group"

          echo "==> Installing docker-compose if missing"
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          docker-compose --version || { echo "docker-compose installation failed"; exit 1; }

          echo "==> Logging in to Docker Hub"
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          echo "==> Creating .env file"
          cat > .env <<EOT
  ENV=${{ secrets.ENV }}
  REDIS_URL=${{ secrets.REDIS_URL }}
  RDS_CONNECTION=${{ secrets.RDS_CONNECTION }}
  SQS_QUEUE_URL=${{ secrets.SQS_QUEUE_URL }}
  AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION=${{ secrets.AWS_REGION }}
  EOT
  
  echo "==> Validating .env file"
  ls -la .env
  cat .env
  
  echo "==> Creating docker-compose.yml"
  cat > docker-compose.yml <<EOT
version: '3.8'
services:
  driver:
    image: monlaine123/monlai:latest
    command: ["./main", "driver", "--port", "8082"]
    ports:
      - "8082:8082"
    env_file:
      - .env

  customer:
    image: monlaine123/monlai:latest
    command: ["./main", "customer", "--port", "8081"]
    ports:
      - "8081:8081"
    env_file:
      - .env
  EOT
  
  echo "==> Validating docker-compose.yml"
  docker-compose config || { echo "Invalid docker-compose.yml"; exit 1; }
  
  echo "==> Cloning or updating repository"
  if [ ! -d .git ]; then
  git clone ${{ secrets.REPO_URL }} . || { echo "Git clone failed"; exit 1; }
  fi
  git fetch origin
  git reset --hard origin/main
  
  echo "==> Stopping old containers"
  docker-compose down || echo "No containers to stop"
  
  echo "==> Pulling new images and starting containers"
  docker-compose pull
  docker-compose up --build -d
  
  echo "==> Showing running containers"
  docker ps
  
  echo "==> Showing container logs"
  docker-compose logs --tail=50
  
  echo "==> Deployment complete"
  EOF
